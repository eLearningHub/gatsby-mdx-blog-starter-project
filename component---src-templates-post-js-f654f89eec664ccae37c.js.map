{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["CategoryList","list","map","category","key","to","Post","data","site","mdx","pageContext","next","prev","frontmatter","title","date","banner","sizes","childImageSharp","alt","siteMetadata","keywords","join","body","categories","fields","slug","pageQuery","React","require","useMDXComponents","useMDXScope","module","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","fn"],"mappings":"6FAAA,oLAQMA,EAAe,SAAC,GAAD,QAAGC,YAAH,MAAU,GAAV,SACnB,kBAAC,WAAD,mBAEE,4BACGA,EAAKC,KAAI,SAAAC,GAAQ,OAChB,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAME,GAAE,eAAiBF,GAAaA,UAOjC,SAASG,EAAT,GAGX,IAAD,IAFDC,KAAQC,EAEP,EAFOA,KAAMC,EAEb,EAFaA,IAEb,IADDC,YAAeC,EACd,EADcA,KAAMC,EACpB,EADoBA,KAErB,OACE,kBAAC,IAAD,CAAQJ,KAAMA,EAAMK,YAAaJ,EAAII,aACnC,4BAAKJ,EAAII,YAAYC,OACrB,4BAAKL,EAAII,YAAYE,MAEpBN,EAAII,YAAYG,QACf,kBAAC,IAAD,CACEC,MAAOR,EAAII,YAAYG,OAAOE,gBAAgBD,MAC9CE,IAAKX,EAAKY,aAAaC,SAASC,KAAK,QAIzC,kBAAC,IAAD,KAAcb,EAAIc,MAElB,6BACE,kBAACvB,EAAD,CAAcC,KAAMQ,EAAII,YAAYW,aAEpC,6BAECZ,GACC,yCACW,IACT,kBAAC,IAAD,CAAMP,GAAIO,EAAKa,OAAOC,MAAOd,EAAKa,OAAOX,QAG5CH,GACC,qCACO,IACL,kBAAC,IAAD,CAAMN,GAAIM,EAAKc,OAAOC,MAAOf,EAAKc,OAAOX,UAQ9C,IAAMa,EAAS,c,qrEC7DtB,IAAMC,EAAQC,EAAd,Q,EACkCA,EAAQ,QAAlCC,E,EAAAA,iBAAkBrB,E,EAAAA,IAClBsB,EAAgBF,EAAQ,QAAxBE,YAERC,UAAiB,SAAqB,GAKlC,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBP,EAAtB,GACMQ,EAAWP,EAFhB,GAKKQ,EAAMX,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMY,EAAS,GAGbZ,MAHa,EAIbnB,OAJF,GAQMgC,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAArC,GAAG,OAAIoC,EAAJ,MAG3B,OAFQ,mCAAR,KAEOI,2BAAP,OACC,CAACT,EAlBJ,IAoBA,OAAOP,EAAA,mBAA2BM,WAAYG,GAA9C","file":"component---src-templates-post-js-f654f89eec664ccae37c.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport MDXRenderer from 'gatsby-plugin-mdx/mdx-renderer';\n\nimport Layout from '../components/Layout';\nimport Link from '../components/Link';\n\nconst CategoryList = ({ list = [] }) => (\n  <Fragment>\n    Categories:\n    <ul>\n      {list.map(category => (\n        <li key={category}>\n          <Link to={`/categories/${category}`}>{category}</Link>\n        </li>\n      ))}\n    </ul>\n  </Fragment>\n);\n\nexport default function Post({\n  data: { site, mdx },\n  pageContext: { next, prev },\n}) {\n  return (\n    <Layout site={site} frontmatter={mdx.frontmatter}>\n      <h1>{mdx.frontmatter.title}</h1>\n      <h2>{mdx.frontmatter.date}</h2>\n\n      {mdx.frontmatter.banner && (\n        <Img\n          sizes={mdx.frontmatter.banner.childImageSharp.sizes}\n          alt={site.siteMetadata.keywords.join(', ')}\n        />\n      )}\n\n      <MDXRenderer>{mdx.body}</MDXRenderer>\n\n      <div>\n        <CategoryList list={mdx.frontmatter.categories} />\n\n        <hr />\n\n        {prev && (\n          <span>\n            Previous{' '}\n            <Link to={prev.fields.slug}>{prev.fields.title}</Link>\n          </span>\n        )}\n        {next && (\n          <span>\n            Next{' '}\n            <Link to={next.fields.slug}>{next.fields.title}</Link>\n          </span>\n        )}\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    site {\n      ...site\n    }\n    mdx(fields: { id: { eq: $id } }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        banner {\n          childImageSharp {\n            sizes(maxWidth: 900) {\n              ...GatsbyImageSharpSizes\n            }\n          }\n        }\n        slug\n        categories\n        keywords\n      }\n      body\n    }\n  }\n`;\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}